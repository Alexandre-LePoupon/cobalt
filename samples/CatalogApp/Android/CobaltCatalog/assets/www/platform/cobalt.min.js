var cobalt={userEvents:{},debug:false,debugInBrowser:false,debugInDiv:false,callbacks:{},lastCallbackId:0,init:function(options){if(options){this.debug=options.debug===true;this.debugInBrowser=options.debugInBrowser===true;this.debugInDiv=options.debugInDiv===true;this.plugins.pluginsOptions=options.plugins||{};if(cobalt.debugInDiv){this.createLogDiv()}if(options.events){this.userEvents=options.events}cobalt.storage.enable();cobalt.utils.extend(cobalt.datePicker,options.datePicker);if(cobalt.datePicker.enabled){cobalt.datePicker.init()}}else{cobalt.storage.enable()}if(cobalt.adapter.init){cobalt.adapter.init()}cobalt.plugins.init();cobalt.send({type:"cobaltIsReady"})},addEventListener:function(eventName,handlerFunction){if(typeof eventName==="string"&&typeof handlerFunction==="function"){this.userEvents[eventName]=handlerFunction}},removeEventListener:function(eventName){if(typeof eventName==="string"&&this.userEvents[eventName]){this.userEvents[eventName]=undefined}},log:function(){var logString=cobalt.argumentsToString(arguments);if(cobalt.debug){if(cobalt.debugInBrowser&&window.console){console.log(logString)}else{cobalt.send({type:"log",value:logString})}cobalt.divLog(logString)}},divLog:function(){if(cobalt.debugInDiv){cobalt.createLogDiv();var logdiv=cobalt.utils.$("#cobalt_logdiv");if(logdiv){var logString="<br/>"+cobalt.argumentsToString(arguments);try{cobalt.utils.append(logdiv,logString)}catch(e){cobalt.utils.append(logdiv,"<b>cobalt.log failed on something.</b>")}}}},argumentsToString:function(){var stringItems=[];cobalt.utils.each(arguments[0],function(i,elem){stringItems.push(cobalt.toString(elem))});return stringItems.join(" ")},createLogDiv:function(){if(!cobalt.utils.$("#cobalt_logdiv")){cobalt.utils.append(document.body,'<div id="cobalt_logdiv" style="width:100%; text-align: left; height: 100px; border:1px solid blue; overflow: scroll; background:#eee;"></div>')}},send:function(obj,callback){if(callback){if(typeof callback==="function"){obj.callback=""+cobalt.lastCallbackId++;cobalt.callbacks[obj.callback]=callback}else if(typeof callback==="string"){obj.callback=""+callback}}if(cobalt.debugInBrowser){cobalt.log("sending",obj)}cobalt.adapter.send(obj,callback)},sendEvent:function(eventName,params,callback){if(eventName){var obj={type:"event",event:eventName,data:params||{}};cobalt.send(obj,callback)}},sendCallback:function(callback,data){if(typeof callback==="string"&&callback.length>0){cobalt.divLog("calling callback with callback id = ",callback);cobalt.send({type:"callback",callback:callback,data:data})}},navigate:function(navigationType,page,controller,animated){if(typeof animated==="undefined"){animated=true}switch(navigationType){case"push":if(page){cobalt.send({type:"navigation",action:"push",data:{page:page,controller:controller,animated:animated}})}break;case"replace":if(page){cobalt.send({type:"navigation",action:"replace",data:{page:page,controller:controller,animated:animated}})}break;case"pop":cobalt.send({type:"navigation",action:"pop"});break;case"modal":if(page){cobalt.adapter.navigateToModal(page,controller)}break;case"dismiss":cobalt.adapter.dismissFromModal();break}},toast:function(text){cobalt.send({type:"ui",control:"toast",data:{message:cobalt.toString(text)}})},alert:function(title,text,buttons,options){if(title||text){var obj={type:"ui",control:"alert",data:{message:text,title:title}};var callback;if(buttons&&cobalt.isArray(buttons)&&buttons.length){obj.data.buttons=buttons}if(options){if(typeof options.callback==="string"||typeof options.callback==="function"){callback=options.callback}if(options.cancelable){obj.data.cancelable=true}}if(!obj.data.id||!cobalt.isNumber(obj.data.id)){obj.data.id=0}cobalt.send(obj,callback)}},webLayer:function(action,data,fadeDuration){switch(action){case"dismiss":cobalt.send({type:"webLayer",action:"dismiss",data:data});break;case"show":if(data){cobalt.send({type:"webLayer",action:"show",data:{page:data,fadeDuration:fadeDuration}})}break}},openExternalUrl:function(url){if(url){cobalt.send({type:"intent",action:"openExternalUrl",data:{url:url}})}},execute:function(json){cobalt.divLog("received",json);if(json&&typeof json=="string"){try{json=JSON.parse(json)}catch(e){cobalt.divLog("can't parse string to JSON")}}try{switch(json&&json.type){case"plugin":cobalt.plugins.handleEvent(json);break;case"event":cobalt.adapter.handleEvent(json);break;case"callback":cobalt.adapter.handleCallback(json);break;default:cobalt.adapter.handleUnknown(json)}}catch(e){cobalt.log("cobalt.execute failed : "+e)}},tryToCallCallback:function(json){cobalt.divLog("trying to call web callback");var callbackfunction=null;if(cobalt.isNumber(json.callback)&&typeof cobalt.callbacks[json.callback]==="function"){callbackfunction=cobalt.callbacks[json.callback]}else if(typeof json.callback==="string"){callbackfunction=eval(json.callback)}if(typeof callbackfunction==="function"){try{callbackfunction(json.data)}catch(e){cobalt.log("Failed calling callback : "+e)}}else{cobalt.adapter.handleUnknown(json)}},isNumber:function(n){return!isNaN(parseFloat(n))&&isFinite(n)},isArray:function(arr){return Object.prototype.toString.call(arr)==="[object Array]"},toString:function(stuff){switch(typeof stuff){case"string":break;case"function":stuff=(""+stuff.call).replace("native","web");break;default:try{stuff=JSON.stringify(stuff)}catch(e){stuff=""+stuff}}return stuff},HTMLEncode:function(value){var element=document.createElement("div");cobalt.utils.text(element,value||"");return cobalt.utils.html(element)},HTMLDecode:function(value){var element=document.createElement("div");cobalt.utils.html(element,value||"");return cobalt.utils.text(element)},defaultBehaviors:{handleEvent:function(json){cobalt.log("received event",json.event);if(cobalt.userEvents&&typeof cobalt.userEvents[json.event]==="function"){cobalt.userEvents[json.event](json.data,json.callback)}else{cobalt.adapter.handleUnknown(json)}},handleCallback:function(json){switch(json.callback){default:cobalt.tryToCallCallback(json);break}},handleUnknown:function(json){cobalt.log("received unhandled message ",json)},navigateToModal:function(page,controller){cobalt.send({type:"navigation",action:"modal",data:{page:page,controller:controller}})},dismissFromModal:function(){cobalt.send({type:"navigation",action:"dismiss"})},initStorage:function(){return cobalt.storage.enable()}},utils:{$:function(selector){if(typeof selector==="string"){if(selector[0]=="#"){return document.getElementById(selector.replace("#",""))}else{return document.querySelectorAll(selector)}}else{return selector}},attr:function(node,attr,value){node=cobalt.utils.$(node);if(value){if(node&&node.setAttribute){node.setAttribute(attr,value)}}else{return node&&node.getAttribute?node.getAttribute(attr):undefined}},text:function(node,text){node=cobalt.utils.$(node);if(typeof node=="object"){if(text){node.innerText=text}else{return node.innerText}}},html:function(node,html){node=cobalt.utils.$(node);if(typeof node=="object"){if(html!=undefined){node.innerHTML=html}else{return node.innerHTML}}},likeArray:function(obj){return typeof obj.length=="number"},each:function(elements,callback){var i,key;if(cobalt.utils.likeArray(elements)){for(i=0;i<elements.length;i++)if(callback.call(elements[i],i,elements[i])===false)return}else{for(key in elements)if(callback.call(elements[key],key,elements[key])===false)return}return},extend:function(obj,source){if(!obj)obj={};if(source){for(var prop in source){obj[prop]=source[prop]}}return obj},append:function(node,html){node=cobalt.utils.$(node);if(typeof node=="object"){node.innerHTML=node.innerHTML+html}},css:function(node,obj){node=cobalt.utils.$(node);if(typeof node==="object"&&node.style){if(typeof obj=="object"){for(var prop in obj){node.style[prop]=typeof obj[prop]=="string"?obj[prop]:obj[prop]+"px"}}else{var style=window.getComputedStyle(node);if(style){return style[obj]?style[obj].replace("px",""):undefined}}}},addClass:function(node,css_class){node=cobalt.utils.$(node);if(typeof node=="object"&&css_class){if(node.classList){node.classList.add(css_class)}else{node.setAttribute("class",node.getAttribute("class")+" "+css_class)}}},removeClass:function(node,css_class){node=cobalt.utils.$(node);if(typeof node=="object"&&css_class){if(node.classList){node.classList.remove(css_class)}else{node.setAttribute("class",node.getAttribute("class").replace(css_class,""))}}}},datePicker:{enabled:true,texts:{validate:"Ok",cancel:"Cancel",clear:"Clear"},format:function(value){return value},placeholderStyles:"width:100%; color:#AAA;",init:function(){var inputs=cobalt.utils.$("input[type=date]");cobalt.utils.each(inputs,function(){var input=this;var id=cobalt.utils.attr(input,"id");if(!id){id="CobaltGeneratedId_"+Math.random().toString(36).substring(7);cobalt.utils.attr(input,"id",id)}cobalt.datePicker.updateFromValue.apply(input)});if(cobalt.adapter.datePicker&&cobalt.adapter.datePicker.init){cobalt.adapter.datePicker.init(inputs)}},updateFromValue:function(){var id=cobalt.utils.attr(this,"id");cobalt.log("updating storage value of date #",id);if(this.value){cobalt.utils.addClass(this,"not_empty")}else{cobalt.utils.removeClass(this,"not_empty")}cobalt.log("current value is",this.value);var values=this.value.split("-");if(values.length==3){var d={year:parseInt(values[0],10),month:parseInt(values[1],10),day:parseInt(values[2],10)};cobalt.log("setting storage date ","CobaltDatePickerValue_"+id,d);cobalt.storage.setItem("CobaltDatePickerValue_"+id,d,"json")}else{cobalt.log("removing date");cobalt.storage.removeItem("CobaltDatePickerValue_"+id)}return false},enhanceFieldValue:function(){var date=cobalt.storage.getItem("CobaltDatePickerValue_"+cobalt.utils.attr(this,"id"),"json");if(date){cobalt.log("format date=",date);this.value=cobalt.datePicker.format(cobalt.datePicker.stringifyDate(date))}},stringifyDate:function(date){if(date&&date.year!==undefined){return date.year+"-"+cobalt.datePicker.zerofill(date.month,2)+"-"+cobalt.datePicker.zerofill(date.day,2)}return""},zerofill:function(number,padding){return new String(new Array(padding+1).join("0")+number).slice(-padding)},val:function(input){if(input[0]&&input[0].value!==undefined){input=input[0]}if(cobalt.adapter.datePicker&&cobalt.adapter.datePicker.val){cobalt.log("returning cobalt adapter datePicker value");return cobalt.adapter.datePicker.val(input)}else{cobalt.log("returning cobalt default datePicker value");return input.value||undefined}}},storage:{storage:false,enable:function(){var storage,fail,uid;try{uid=new Date;(storage=window.localStorage).setItem(uid,uid);fail=storage.getItem(uid)!=uid;storage.removeItem(uid);fail&&(storage=false)}catch(e){}if(!storage){return false}else{this.storage=storage;return true}},clear:function(){if(this.storage){this.storage.clear()}},getItem:function(uid,type){if(this.storage){var val=this.storage.getItem(uid);if(val){switch(type){case undefined:return val;case"int":return parseInt(val);case"float":return parseFloat(val);case"date":return new Date(val);case"json":return JSON.parse(val)}return val}return undefined}},setItem:function(uid,value,type){if(this.storage){switch(type){case"json":return this.storage.setItem(uid,JSON.stringify(value));default:return this.storage.setItem(uid,""+value)}}},removeItem:function(uid){if(this.storage){return this.storage.removeItem(uid)}}},plugins:{pluginsOptions:{},enabledPlugins:{},register:function(plugin){if(plugin&&typeof plugin.name==="string"&&typeof plugin.init==="function"){cobalt.plugins.enabledPlugins[plugin.name]=plugin}},init:function(){for(var pluginName in cobalt.plugins.enabledPlugins){if(cobalt.plugins.enabledPlugins[pluginName]){var options=cobalt.plugins.pluginsOptions[pluginName];cobalt.plugins.enabledPlugins[pluginName].init(options)}}},handleEvent:function(event){if(typeof event.name==="string"){if(cobalt.plugins.enabledPlugins[event.name]&&typeof cobalt.plugins.enabledPlugins[event.name].handleEvent==="function"){try{cobalt.plugins.enabledPlugins[event.name].handleEvent(event)}catch(e){cobalt.log('failed calling "'+event.name+'" plugin handleEvent function. ',e)}}else{cobalt.log('plugin "'+event.name+'" not found or no handleEvent function in this plugin.')}}else{cobalt.log("unknown plugin event",event)}}}};cobalt.android_adapter={init:function(){cobalt.platform="Android"},handleEvent:function(json){cobalt.log("received event",json.event);if(cobalt.userEvents&&typeof cobalt.userEvents[json.event]==="function"){cobalt.userEvents[json.event](json.data,json.callback)}else{switch(json.event){case"onBackButtonPressed":cobalt.log("sending OK for a native back");cobalt.sendCallback(json.callback,{value:true});break;default:cobalt.adapter.handleUnknown(json);break}}},send:function(obj){if(obj&&!cobalt.debugInBrowser){cobalt.divLog("sending",obj);try{Android.handleMessageSentByJavaScript(JSON.stringify(obj))}catch(e){cobalt.log("ERROR : cant connect to native")}}},navigateToModal:function(page,controller){cobalt.send({type:"navigation",action:"modal",data:{page:page,controller:controller}},"cobalt.adapter.storeModalInformations")},dismissFromModal:function(){var dismissInformations=cobalt.storage.getItem("dismissInformations","json");if(dismissInformations&&dismissInformations.page&&dismissInformations.controller){cobalt.send({type:"navigation",action:"dismiss",data:{page:dismissInformations.page,controller:dismissInformations.controller}});cobalt.storage.removeItem("dismissInformations")}else{cobalt.log("WANRING : dismissInformations are not available in storage")}},storeModalInformations:function(params){cobalt.divLog("storing informations for the dismiss :",params);cobalt.storage.setItem("dismissInformations",params,"json")},initStorage:function(){try{window.localStorage=LocalStorage}catch(e){cobalt.log("LocalStorage WARNING : can't find android class LocalStorage. switching to raw localStorage")}return cobalt.storage.enable()},datePicker:{init:function(inputs){cobalt.utils.each(inputs,function(){var input=this;var id=cobalt.utils.attr(input,"id");cobalt.log("datePicker setted with value="+input.value);cobalt.utils.attr(input,"type","text");cobalt.datePicker.enhanceFieldValue.apply(input);input.addEventListener("focus",function(){cobalt.log("show formPicker date for date #",id);input.blur();var previousDate=cobalt.storage.getItem("CobaltDatePickerValue_"+id,"json");if(!previousDate){var d=new Date;previousDate={year:d.getFullYear(),day:d.getDate(),month:d.getMonth()+1}}cobalt.send({type:"ui",control:"picker",data:{type:"date",date:previousDate,texts:cobalt.datePicker.texts}},function(newDate){if(newDate&&newDate.year){input.value=newDate.year+"-"+newDate.month+"-"+newDate.day;cobalt.log("setting storage date ",newDate);cobalt.storage.setItem("CobaltDatePickerValue_"+id,newDate,"json");cobalt.datePicker.enhanceFieldValue.apply(input)}else{cobalt.log("removing storage date");input.value="";cobalt.storage.removeItem("CobaltDatePickerValue_"+id)}});return false},false)})},val:function(input){var date=cobalt.storage.getItem("CobaltDatePickerValue_"+cobalt.utils.attr(input,"id"),"json");if(date){var str_date=cobalt.datePicker.stringifyDate(date);cobalt.log("returning storage date ",str_date);return str_date}return undefined}},handleCallback:cobalt.defaultBehaviors.handleCallback,handleUnknown:cobalt.defaultBehaviors.handleUnknown};cobalt.adapter=cobalt.android_adapter;